ALIVE <- as.numeric(which(rbinom(n = nrow(ALL),size = 1,prob = 0.07)==0,arr.ind = TRUE))
if(length(ALIVE) > 0) ALL <- matrix(ALL[ALIVE,],ncol = 2,nrow = length(ALIVE))
HERB <- matrix(data = 0,nrow = 50,ncol = 50)
HERB[ALL] <- 1
HERB[LAND < 1] <- 0
# Predator
if(i > 200)   PRED2[HERB==0 & PRED2==1]  <- rbinom(n = length(PRED2[HERB==0 & PRED2==1] ),size = 1,prob = 0.45) # this prob affects densities of predators
# if(i > 200)   PRED2[HERB==0] <- 0
# Movement
PRESENT <- which(PRED2 == 1,arr.ind = T)
PRESENT <- unique(PRESENT + sample(x = seq(-10,10,1),size = 2*nrow(PRESENT),replace = TRUE))
# offspring
OFFS <- PRESENT+(rbinom(n = nrow(PRESENT),size = 1,prob = 1)*sample(x = seq(-10,10,1),size = nrow(PRESENT),replace = TRUE))
# if(length(OFFS) > 2000) OFFS <- OFFS[sample(x = 1:nrow(OFFS),size = 200,replace = FALSE),]
ALL <- rbind(PRESENT,OFFS)
OUT <- which(ALL > 50,arr.ind = T)
ALL[OUT] <- ALL[OUT] - 50
OUT2 <- which(ALL < 0,arr.ind = T)
ALL[OUT2] <- ALL[OUT2] + 50
ALL <- unique(ALL)
ALIVE <- as.numeric(which(rbinom(n = nrow(ALL),size = 1,prob = 0.007)==0,arr.ind = TRUE))
if(length(ALIVE) > 0) ALL <- matrix(ALL[ALIVE,],ncol = 2,nrow = length(ALIVE))
PRED2 <- matrix(data = 0,nrow = 50,ncol = 50)
PRED2[ALL] <- 1
# Storing
store[i,1] <- i
store[i,2] <- sum(HERB)
store[i,3] <- sum(PRED2)
storeLAND[i,1] <- i
storeLAND[i,2] <- min(LAND)
storeLAND[i,3] <- mean(LAND)
storeLAND[i,4] <- max(LAND)
if(i == i*rbinom(n = 1,size = 1,prob = 0.0009)){
print(i)
LAND <- LAND - DIST #event destroying habitat
}
# image(LAND)
# image(HERB)
}
par(mfrow=c(2,1))
# plot(store,type = 'l')
plot(x = store[,1], y = store[,2]/(50*50), type = 'l',ylim = c(0,0.5), ylab = "Population Density",xlab = "")
lines(x = store[,1], y = store[,3]/(50*50), type = 'l', col="red")
plot(x = storeLAND[,1], y = storeLAND[,3], type = 'l',ylim = c(-2,5),xlab = "Time",ylab = "Habitat Quality")
lines(x = storeLAND[,1], y = storeLAND[,2], col='red')
lines(x = storeLAND[,1], y = storeLAND[,4],  col='blue')
cor(store[store[,3]>0,])
matrix(rbinom(n = 50*50,size = 1,prob = 0.5),nrow = 50,ncol = 50)*1
time <- 2000
LAND <- matrix(data = 5,nrow = 50,ncol = 50)
# image(LAND)
HERB <- matrix(data = 0,nrow = 50,ncol = 50)
HERB[25,25] <- 1
DIST <- matrix(rbinom(n = 50*50,size = 1,prob = 0.5),nrow = 50,ncol = 50)*2
PRED2 <- matrix(data = 0, nrow = 50, ncol=50)
# image(HERB)
# RULES
store <- matrix(NA,nrow = time,ncol = 3)
storeLAND <- matrix(NA,nrow = time,ncol = 4)
for(i in 1:time){
if(i == 200)  PRED2 <- matrix(rbinom(n = 50*50,size = 1,prob = 0.1),nrow = 50,ncol = 50)
# LAnscape
LAND[HERB==1] <- LAND[HERB==1] - 0.3
LAND[HERB==0] <- 0.1*(5-LAND[HERB==0])+LAND[HERB==0]
# Herb
HERB[PRED2==1] <- 0
HERB[LAND < 0.8] <- 0
PRESENT <- which(HERB == 1,arr.ind = T)
PRESENT <- unique(PRESENT + sample(x = c(-1,0,1),size = 2*nrow(PRESENT),replace = TRUE))
OFFS <- PRESENT+(rbinom(n = 2*nrow(PRESENT),size = 1,prob = 0.8)*sample(x = c(-2,-1,1,2),size = 2*nrow(PRESENT),replace = TRUE))
ALL <- rbind(PRESENT,OFFS)
OUT <- which(ALL > 50,arr.ind = T)
ALL[OUT] <- ALL[OUT] - 50
OUT2 <- which(ALL < 0,arr.ind = T)
ALL[OUT2] <- ALL[OUT2] + 50
ALL <- unique(ALL)
ALIVE <- as.numeric(which(rbinom(n = nrow(ALL),size = 1,prob = 0.07)==0,arr.ind = TRUE))
if(length(ALIVE) > 0) ALL <- matrix(ALL[ALIVE,],ncol = 2,nrow = length(ALIVE))
HERB <- matrix(data = 0,nrow = 50,ncol = 50)
HERB[ALL] <- 1
HERB[LAND < 1] <- 0
# Predator
if(i > 200)   PRED2[HERB==0 & PRED2==1]  <- rbinom(n = length(PRED2[HERB==0 & PRED2==1] ),size = 1,prob = 0.45) # this prob affects densities of predators
# if(i > 200)   PRED2[HERB==0] <- 0
# Movement
PRESENT <- which(PRED2 == 1,arr.ind = T)
PRESENT <- unique(PRESENT + sample(x = seq(-10,10,1),size = 2*nrow(PRESENT),replace = TRUE))
# offspring
OFFS <- PRESENT+(rbinom(n = nrow(PRESENT),size = 1,prob = 1)*sample(x = seq(-10,10,1),size = nrow(PRESENT),replace = TRUE))
# if(length(OFFS) > 2000) OFFS <- OFFS[sample(x = 1:nrow(OFFS),size = 200,replace = FALSE),]
ALL <- rbind(PRESENT,OFFS)
OUT <- which(ALL > 50,arr.ind = T)
ALL[OUT] <- ALL[OUT] - 50
OUT2 <- which(ALL < 0,arr.ind = T)
ALL[OUT2] <- ALL[OUT2] + 50
ALL <- unique(ALL)
ALIVE <- as.numeric(which(rbinom(n = nrow(ALL),size = 1,prob = 0.007)==0,arr.ind = TRUE))
if(length(ALIVE) > 0) ALL <- matrix(ALL[ALIVE,],ncol = 2,nrow = length(ALIVE))
PRED2 <- matrix(data = 0,nrow = 50,ncol = 50)
PRED2[ALL] <- 1
# Storing
store[i,1] <- i
store[i,2] <- sum(HERB)
store[i,3] <- sum(PRED2)
storeLAND[i,1] <- i
storeLAND[i,2] <- min(LAND)
storeLAND[i,3] <- mean(LAND)
storeLAND[i,4] <- max(LAND)
if(i == i*rbinom(n = 1,size = 1,prob = 0.0009)){
print(i)
LAND <- LAND - DIST #event destroying habitat
}
# image(LAND)
# image(HERB)
}
par(mfrow=c(2,1))
# plot(store,type = 'l')
plot(x = store[,1], y = store[,2]/(50*50), type = 'l',ylim = c(0,0.5), ylab = "Population Density",xlab = "")
lines(x = store[,1], y = store[,3]/(50*50), type = 'l', col="red")
plot(x = storeLAND[,1], y = storeLAND[,3], type = 'l',ylim = c(-2,5),xlab = "Time",ylab = "Habitat Quality")
lines(x = storeLAND[,1], y = storeLAND[,2], col='red')
lines(x = storeLAND[,1], y = storeLAND[,4],  col='blue')
cor(store[store[,3]>0,])
time <- 2000
LAND <- matrix(data = 5,nrow = 50,ncol = 50)
# image(LAND)
HERB <- matrix(data = 0,nrow = 50,ncol = 50)
HERB[25,25] <- 1
DIST <- matrix(rbinom(n = 50*50,size = 1,prob = 0.5),nrow = 50,ncol = 50)*3
PRED2 <- matrix(data = 0, nrow = 50, ncol=50)
# image(HERB)
# RULES
store <- matrix(NA,nrow = time,ncol = 3)
storeLAND <- matrix(NA,nrow = time,ncol = 4)
for(i in 1:time){
if(i == 200)  PRED2 <- matrix(rbinom(n = 50*50,size = 1,prob = 0.1),nrow = 50,ncol = 50)
# LAnscape
LAND[HERB==1] <- LAND[HERB==1] - 0.3
LAND[HERB==0] <- 0.1*(5-LAND[HERB==0])+LAND[HERB==0]
# Herb
HERB[PRED2==1] <- 0
HERB[LAND < 0.8] <- 0
PRESENT <- which(HERB == 1,arr.ind = T)
PRESENT <- unique(PRESENT + sample(x = c(-1,0,1),size = 2*nrow(PRESENT),replace = TRUE))
OFFS <- PRESENT+(rbinom(n = 2*nrow(PRESENT),size = 1,prob = 0.8)*sample(x = c(-2,-1,1,2),size = 2*nrow(PRESENT),replace = TRUE))
ALL <- rbind(PRESENT,OFFS)
OUT <- which(ALL > 50,arr.ind = T)
ALL[OUT] <- ALL[OUT] - 50
OUT2 <- which(ALL < 0,arr.ind = T)
ALL[OUT2] <- ALL[OUT2] + 50
ALL <- unique(ALL)
ALIVE <- as.numeric(which(rbinom(n = nrow(ALL),size = 1,prob = 0.07)==0,arr.ind = TRUE))
if(length(ALIVE) > 0) ALL <- matrix(ALL[ALIVE,],ncol = 2,nrow = length(ALIVE))
HERB <- matrix(data = 0,nrow = 50,ncol = 50)
HERB[ALL] <- 1
HERB[LAND < 1] <- 0
# Predator
if(i > 200)   PRED2[HERB==0 & PRED2==1]  <- rbinom(n = length(PRED2[HERB==0 & PRED2==1] ),size = 1,prob = 0.45) # this prob affects densities of predators
# if(i > 200)   PRED2[HERB==0] <- 0
# Movement
PRESENT <- which(PRED2 == 1,arr.ind = T)
PRESENT <- unique(PRESENT + sample(x = seq(-10,10,1),size = 2*nrow(PRESENT),replace = TRUE))
# offspring
OFFS <- PRESENT+(rbinom(n = nrow(PRESENT),size = 1,prob = 1)*sample(x = seq(-10,10,1),size = nrow(PRESENT),replace = TRUE))
# if(length(OFFS) > 2000) OFFS <- OFFS[sample(x = 1:nrow(OFFS),size = 200,replace = FALSE),]
ALL <- rbind(PRESENT,OFFS)
OUT <- which(ALL > 50,arr.ind = T)
ALL[OUT] <- ALL[OUT] - 50
OUT2 <- which(ALL < 0,arr.ind = T)
ALL[OUT2] <- ALL[OUT2] + 50
ALL <- unique(ALL)
ALIVE <- as.numeric(which(rbinom(n = nrow(ALL),size = 1,prob = 0.007)==0,arr.ind = TRUE))
if(length(ALIVE) > 0) ALL <- matrix(ALL[ALIVE,],ncol = 2,nrow = length(ALIVE))
PRED2 <- matrix(data = 0,nrow = 50,ncol = 50)
PRED2[ALL] <- 1
# Storing
store[i,1] <- i
store[i,2] <- sum(HERB)
store[i,3] <- sum(PRED2)
storeLAND[i,1] <- i
storeLAND[i,2] <- min(LAND)
storeLAND[i,3] <- mean(LAND)
storeLAND[i,4] <- max(LAND)
if(i == i*rbinom(n = 1,size = 1,prob = 0.0009)){
print(i)
LAND <- LAND - DIST #event destroying habitat
}
# image(LAND)
# image(HERB)
}
par(mfrow=c(2,1))
# plot(store,type = 'l')
plot(x = store[,1], y = store[,2]/(50*50), type = 'l',ylim = c(0,0.5), ylab = "Population Density",xlab = "")
lines(x = store[,1], y = store[,3]/(50*50), type = 'l', col="red")
plot(x = storeLAND[,1], y = storeLAND[,3], type = 'l',ylim = c(-2,5),xlab = "Time",ylab = "Habitat Quality")
lines(x = storeLAND[,1], y = storeLAND[,2], col='red')
lines(x = storeLAND[,1], y = storeLAND[,4],  col='blue')
cor(store[store[,3]>0,])
# Joao Braga (2015)
rg <- function(){
#Dependencies
rotate <- function(x) t(apply(x, 2, rev))
library(beepr)
#custom images
#1 Knigth
knight <- c(0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,1,1,1,1,1,3,3,3,3,3,3,1,1,1,1,1,1
,1,3,1,1,1,3,3,3,3,3,1,1,1,0,0,0,0,1,3,1,1,1,3,3,3,3,1,1,1,1,0,0,0,0,1,3,1,1,1,3,3,3,1,1,1,1,1,0,0,0,0,1,3,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0
,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,3,1,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,0,0,0,0,0,0,0,0,0,0)
knight <- matrix(knight,nrow = 17,ncol = 12)
#IntroS
readline("Welcome to Riel! (press enter to continue)")
land_init <-matrix(sample(c(1,2,3),size = 30*30,replace = T),30,30)
#image(land_init, axes = F, col=c("green","grey", "blue"))
beep(sound = 8)
image(rotate(knight),col=c("white","red","yellow","black"),axes=F)
name <- readline("Name yourself! : ")
#starting position
x <- 15
y <- 15
land_cur <- land_init
land_cur[x,y] <- 4
image(land_cur[11:20,11:20], axes = F, col=c("green","grey","blue","black"))
#grid(nx=10, ny=10, lty=1, col="black")
enemies <- matrix(sample(x = c(0,1),size = 30*30,replace = T),30,30)
life <- 3
run <- 1
print(paste(name,",you just woke up and you do not have any idea of how you got here.",name,",you better keep moving, there are monsters on these lands!"))
while(run== 1){
if(land_init[x,y]==1) print(paste(name,"you are in a forest"))
if(land_init[x,y]==2) print(paste(name,"you are standing in the middle of a road"))
if(land_init[x,y]==3) print(paste(name,"you are in a pond"))
xx <- readline("Do you want to move left (-1), rigth (1) or none (0) ?")
yy <- readline("Do you want to move down (-1), up (1) or none (0) ?")
xx <- as.numeric(unlist(strsplit(xx, ",")))
yy <- as.numeric(unlist(strsplit(yy, ",")))
land <- land_init
x <- x+xx
y <- y+yy
land[x,y] <- 4
# par(mfrow = c(2,1))
image(land[11:20,11:20], axes = F, col=c("green","grey","blue","black"))
# plot(y=rep(1,times = life),x=seq(1,life,1),pch="♥",cex=5, axes=F,main=name,ylab="HP")
# grid(nx=10, ny=10, lty=1, col="black")
while(enemies[x,y]!=0) {
print("An enemy spotted you! You must FIGHT!!!")
# par(mfrow = c(2,1))
# image(land[11:20,11:20], axes = F, col=c("green","grey","blue","black"))
# plot(y=rep(1,times = life),x=seq(1,life,1),pch="♥",cex=5,col="red", axes=F,main=name,ylab="HP",xlab="")
image(rotate(knight),col=c("white","red","yellow","black"),axes=F)
if(enemies[x,y]!=0) {
dice <- readline("Press enter to roll the dice!")
dice <- sample(x = c(1:6),size = 1,replace = FALSE)
print(paste("You rolled:",dice,"."))
enemyroll <- sample(x = c(1:6),size = 1,replace = FALSE)
print(paste("The enemy rolled", enemyroll,"."))
if(dice>=enemyroll) {
enemies[x,y] <- 0
beep(sound = 3)
readline(paste(name,", you won! Continue your travels accross Riel (Press enter to continue)", sep=""))
enemies[x,y] <- 0
# par(mfrow = c(2,1))
image(land[11:20,11:20], axes = F, col=c("green","grey","blue","black"))
}
if(dice< enemyroll) {
beep(sound = 9)
readline(paste(name,", you missed! Try again! (Press enter to continue)", sep=""))
life <- life -1
}
if(life == 0) {
readline(paste(name,"you are dead (Press enter to exit)", sep=", "))
stop()
}
}
}
}
}
# ♥
# ♡
rg()
rg()
# Joao Braga (2015)
rg <- function(){
#Dependencies
rotate <- function(x) t(apply(x, 2, rev))
# library(beepr)
#custom images
#1 Knigth
knight <- c(0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,1,1,1,1,1,3,3,3,3,3,3,1,1,1,1,1,1
,1,3,1,1,1,3,3,3,3,3,1,1,1,0,0,0,0,1,3,1,1,1,3,3,3,3,1,1,1,1,0,0,0,0,1,3,1,1,1,3,3,3,1,1,1,1,1,0,0,0,0,1,3,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0
,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,3,1,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,0,0,0,0,0,0,0,0,0,0)
knight <- matrix(knight,nrow = 17,ncol = 12)
#IntroS
readline("Welcome to Riel! (press enter to continue)")
land_init <-matrix(sample(c(1,2,3),size = 30*30,replace = T),30,30)
#image(land_init, axes = F, col=c("green","grey", "blue"))
#beep(sound = 8)
image(rotate(knight),col=c("white","red","yellow","black"),axes=F)
name <- readline("Name yourself! : ")
#starting position
x <- 15
y <- 15
land_cur <- land_init
land_cur[x,y] <- 4
image(land_cur[11:20,11:20], axes = F, col=c("green","grey","blue","black"))
#grid(nx=10, ny=10, lty=1, col="black")
enemies <- matrix(sample(x = c(0,1),size = 30*30,replace = T),30,30)
life <- 3
run <- 1
print(paste(name,",you just woke up and you do not have any idea of how you got here.",name,",you better keep moving, there are monsters on these lands!"))
while(run== 1){
if(land_init[x,y]==1) print(paste(name,"you are in a forest"))
if(land_init[x,y]==2) print(paste(name,"you are standing in the middle of a road"))
if(land_init[x,y]==3) print(paste(name,"you are in a pond"))
xx <- readline("Do you want to move left (-1), rigth (1) or none (0) ?")
yy <- readline("Do you want to move down (-1), up (1) or none (0) ?")
xx <- as.numeric(unlist(strsplit(xx, ",")))
yy <- as.numeric(unlist(strsplit(yy, ",")))
land <- land_init
x <- x+xx
y <- y+yy
land[x,y] <- 4
# par(mfrow = c(2,1))
image(land[11:20,11:20], axes = F, col=c("green","grey","blue","black"))
# plot(y=rep(1,times = life),x=seq(1,life,1),pch="♥",cex=5, axes=F,main=name,ylab="HP")
# grid(nx=10, ny=10, lty=1, col="black")
while(enemies[x,y]!=0) {
print("An enemy spotted you! You must FIGHT!!!")
# par(mfrow = c(2,1))
# image(land[11:20,11:20], axes = F, col=c("green","grey","blue","black"))
# plot(y=rep(1,times = life),x=seq(1,life,1),pch="♥",cex=5,col="red", axes=F,main=name,ylab="HP",xlab="")
image(rotate(knight),col=c("white","red","yellow","black"),axes=F)
if(enemies[x,y]!=0) {
dice <- readline("Press enter to roll the dice!")
dice <- sample(x = c(1:6),size = 1,replace = FALSE)
print(paste("You rolled:",dice,"."))
enemyroll <- sample(x = c(1:6),size = 1,replace = FALSE)
print(paste("The enemy rolled", enemyroll,"."))
if(dice>=enemyroll) {
enemies[x,y] <- 0
# beep(sound = 3)
readline(paste(name,", you won! Continue your travels accross Riel (Press enter to continue)", sep=""))
enemies[x,y] <- 0
# par(mfrow = c(2,1))
image(land[11:20,11:20], axes = F, col=c("green","grey","blue","black"))
}
if(dice< enemyroll) {
# beep(sound = 9)
readline(paste(name,", you missed! Try again! (Press enter to continue)", sep=""))
life <- life -1
}
if(life == 0) {
readline(paste(name,"you are dead (Press enter to exit)", sep=", "))
stop()
}
}
}
}
}
rg()
library(shiny)
ui <- fluidPage(
actionButton("up", "Up"),
actionButton("down", "Down"),
actionButton("left", "Left"),
actionButton("right", "Right"),
numericInput("n", "n", 1),
plotOutput("plot")
)
server <- function(input, output) {
V <- reactiveValues(x = 15, y = 15, Pos = NULL)
land_init <- matrix(sample(c(1,2,3),size = 30*30,replace = T),30,30)
#starting position
Pos <- observeEvent(input$up, {
V$y <- V$y+input$n
})
Pos <- observeEvent(input$down, {
V$y <- V$y-input$n
})
Pos <- observeEvent(input$left, {
V$x <- V$x-input$n
})
Pos <- observeEvent(input$right, {
V$x <- V$x+input$n
})
output$plot <- renderPlot({
land_init[V$x,V$y] <- 4
image(land_init, axes = F, col=c("green","grey","blue","black"))
})
}
shinyApp(ui, server)
install.packages("png")
setwd("~/Dropbox/Private/R game/The R Game/images")
rg2 <- function(){
# Library
library(png)
land <- readPNG(source = "start.png",native = T,info =F)
land_mask <- readPNG(source = "start_mask.png",native = T,info =F)
char <- readPNG(source = "char.png",native = T,info =F)
main <- readPNG(source= "main.png",native=T, info=F)
#custom images
#1 Knigth
knight <- c(0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,1,1,1,1,1,3,3,3,3,3,3,1,1,1,1,1,1
,1,3,1,1,1,3,3,3,3,3,1,1,1,0,0,0,0,1,3,1,1,1,3,3,3,3,1,1,1,1,0,0,0,0,1,3,1,1,1,3,3,3,1,1,1,1,1,0,0,0,0,1,3,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0
,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,3,1,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,0,0,0,0,0,0,0,0,0,0)
knight <- matrix(knight,nrow = 17,ncol = 12)
#Intro
readline("Welcome to Riel! (press enter to continue)")
land_init <-matrix(sample(c(1,2,3),size = 30*30,replace = T),30,30)
#image(land_init, axes = F, col=c("green","grey", "blue"))
# image(rotate(knight),col=c("white","red","yellow","black"),axes=F)
plot(1:58, type='n', main="", xlab="", ylab="", axes=F)
lim <- par()
rasterImage(main, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4],interpolate = F)
name <- readline("Name yourself! : ")
#starting position
x1 <- 27
y1 <- 27
x2 <- x1+4
y2 <- y1+9
xxxx <- land
xxxx[x1:x2,y1:y2] <- char
#Set up the plot area
plot(1:58, type='n', main="", xlab="", ylab="", axes=F)
#Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(xxxx, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4],interpolate = F)
print(paste(name,",you just woke up and you do not have any idea of how you got here.",name,",you better keep moving, there are monsters on these lands!"))
run <-1
while(run== 1){
xxxx <- land
xx <- readline("Do you want to move left (-1), rigth (1) or none (0) ?")
yy <- readline("Do you want to move UP (1), DOWN (-1) or none (0) ?")
xx <- as.numeric(unlist(strsplit(xx, ",")))
yy <- as.numeric(unlist(strsplit(yy, ",")))
if(length(xx)==0) xx <- 0
if(length(yy)==0) yy <- 0
yy <- yy*-1
x1 <- x1+xx
y1 <- y1+yy
x2 <- x1+4
y2 <- y1+9
xxxx[x1:x2,y1:y2] <- char
rasterImage(xxxx, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4],interpolate = F)
}
}
# ♥
# ♡
rg2()
# Library
library(png)
land <- readPNG(source = "start.png",native = T,info =F)
land_mask <- readPNG(source = "start_mask.png",native = T,info =F)
char <- readPNG(source = "char.png",native = T,info =F)
main <- readPNG(source= "main.png",native=T, info=F)
setwd("~/Dropbox/Private/R game/The R Game/images")
setwd("~/..Dropbox/Private/R game/The R Game/images")
setwd("~/../Dropbox/Private/R game/The R Game/images")
setwd("~/../Dropbox/Dropbox/Private/R game/The R Game/images")
rg2 <- function(){
# Library
library(png)
land <- readPNG(source = "start.png",native = T,info =F)
land_mask <- readPNG(source = "start_mask.png",native = T,info =F)
char <- readPNG(source = "char.png",native = T,info =F)
main <- readPNG(source= "main.png",native=T, info=F)
#custom images
#1 Knigth
knight <- c(0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,1,1,1,1,1,3,3,3,3,3,3,1,1,1,1,1,1
,1,3,1,1,1,3,3,3,3,3,1,1,1,0,0,0,0,1,3,1,1,1,3,3,3,3,1,1,1,1,0,0,0,0,1,3,1,1,1,3,3,3,1,1,1,1,1,0,0,0,0,1,3,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0
,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,3,1,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,0,0,0,0,0,0,0,0,0,0)
knight <- matrix(knight,nrow = 17,ncol = 12)
#Intro
readline("Welcome to Riel! (press enter to continue)")
land_init <-matrix(sample(c(1,2,3),size = 30*30,replace = T),30,30)
#image(land_init, axes = F, col=c("green","grey", "blue"))
# image(rotate(knight),col=c("white","red","yellow","black"),axes=F)
plot(1:58, type='n', main="", xlab="", ylab="", axes=F)
lim <- par()
rasterImage(main, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4],interpolate = F)
name <- readline("Name yourself! : ")
#starting position
x1 <- 27
y1 <- 27
x2 <- x1+4
y2 <- y1+9
xxxx <- land
xxxx[x1:x2,y1:y2] <- char
#Set up the plot area
plot(1:58, type='n', main="", xlab="", ylab="", axes=F)
#Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(xxxx, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4],interpolate = F)
print(paste(name,",you just woke up and you do not have any idea of how you got here.",name,",you better keep moving, there are monsters on these lands!"))
run <-1
while(run== 1){
xxxx <- land
xx <- readline("Do you want to move left (-1), rigth (1) or none (0) ?")
yy <- readline("Do you want to move UP (1), DOWN (-1) or none (0) ?")
xx <- as.numeric(unlist(strsplit(xx, ",")))
yy <- as.numeric(unlist(strsplit(yy, ",")))
if(length(xx)==0) xx <- 0
if(length(yy)==0) yy <- 0
yy <- yy*-1
x1 <- x1+xx
y1 <- y1+yy
x2 <- x1+4
y2 <- y1+9
xxxx[x1:x2,y1:y2] <- char
rasterImage(xxxx, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4],interpolate = F)
}
}
rg2()
